version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sci_postgres
    environment:
      POSTGRES_DB: crowd_intelligence
      POSTGRES_USER: sci_user
      POSTGRES_PASSWORD: sci_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - sci_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sci_user -d crowd_intelligence"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sci_redis
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - sci_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Smart Crowd Intelligence API
  sci_api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: sci_api
    environment:
      - DATABASE_URL=postgresql://sci_user:sci_password_2024@postgres:5432/crowd_intelligence
      - REDIS_URL=redis://:redis_password_2024@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ../config:/app/config
      - ../logs:/app/logs
      - ../data:/app/data
      - ../models:/app/models
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    ports:
      - "8000:8000"
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sci_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sci_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../frontend:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - sci_api
    restart: unless-stopped
    networks:
      - sci_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sci_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - sci_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sci_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sci_network

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sci_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - sci_network

  # Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: sci_logstash
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - sci_network

  # Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sci_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - sci_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  sci_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16